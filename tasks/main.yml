---

- name: Create custom configuration
  community.general.ini_file:
    path: "{{ container_storage_dir_base_backup }}/{{ mariadb_container_name }}/conf.d/custom.cnf"
    section: mysqld
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    mode: '0644'
  loop:
    - {option: 'max_connections', value: '{{ mariadb_container_max_connections }}'}
    - {option: 'innodb_read_only_compressed', value: 'off'}

- name: Start MariaDB container for {{ mariadb_database }}
  containers.podman.podman_container:
    name: "{{ mariadb_container_name }}"
    image: "docker.io/mariadb:{{ mariadb_container_image_tag | d('latest') }}"
    network: "{{ podman_network_name }}"
    state: started
    restart_policy: always
    recreate: true
    stop_timeout: 90
    # published: '{{ mariadb_container_exposed_port }}:3306'
    volume:
      - "{{ container_storage_dir_base }}/{{ mariadb_container_name }}/var_lib_mysql:/var/lib/mysql:Z"
      - "{{ container_storage_dir_base_backup }}/{{ mariadb_container_name }}/conf.d:/etc/mysql/conf.d:Z"
    env:
      MYSQL_USER: "{{ mariadb_user }}"
      MYSQL_PASSWORD: "{{ mariadb_password }}"
      MYSQL_DATABASE: "{{ mariadb_database }}"
      MYSQL_ROOT_PASSWORD: "{{ mariadb_root_password }}"
    generate_systemd:
      path: /etc/systemd/system/
      restart_policy: always
  register: _container_start_results
# - debug: var=_container_start_results

- name: Enable systemd service
  ansible.builtin.service:
    name: "{{ (_container_start_results.podman_systemd | dict2items | list | first).key }}"
    enabled: true

- name: Create backup directory {{ mariadb_container_name }}
  ansible.builtin.file:
    path: "{{ container_storage_dir_base_backup }}/{{ mariadb_container_name }}_backups"
    state: directory
    mode: '0700'
  tags:
    - mariadb_backup

- name: Ensure bzip2 is installed
  ansible.builtin.package:
    name: bzip2
    state: present
  tags:
    - mariadb_backup

- name: Add cronjob for daily dump of mariadb {{ mariadb_database }}
  ansible.builtin.cron:
    name: "Daily dump of mariadb {{ mariadb_database }}"
    minute: "11"
    hour: "*/4"
    job: "podman exec {{ mariadb_container_name }} sh -c 'exec mysqldump --lock-tables --all-databases --user=root --password={{ mariadb_root_password }}' >
      {{ container_storage_dir_base_backup }}/{{ mariadb_container_name }}_backups/{{ mariadb_container_name }}.sql;
      bzip2 -f {{ container_storage_dir_base_backup }}/{{ mariadb_container_name }}_backups/{{ mariadb_container_name }}.sql"
  tags:
    - mariadb_backup

- name: Configure logrotate for the database dump
  ansible.builtin.template:
    src: logrotate.cfg.j2
    dest: "/etc/logrotate.d/{{ mariadb_container_name }}.cfg"
    mode: '0644'
  tags:
    - mariadb_backup

- name: Selinux enable logrotate on NFS
  ansible.posix.seboolean:
    name: logrotate_use_nfs
    state: true
    persistent: true
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - mariadb_selinux

- name: Set selinux policy for backup rotation
  community.general.sefcontext:
    target: '{{ item.target }}'
    setype: "{{ item.setype }}"
    reload: true
    state: "{{ item.state }}"
  register: filecontext
  with_items:
    - {target: '{{ container_storage_dir_base_backup }}/{{ mariadb_container_name }}_backups(/.*)?', setype: 'var_log_t', state: 'present'}
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - mariadb_selinux

- name: Run restore context to reload selinux
  ansible.builtin.command: |
    restorecon -F -R -v {{ item.target }}
  with_items:
    - {index: 0, target: '{{ container_storage_dir_base_backup }}/{{ mariadb_container_name }}_backups'}
  when:
    - filecontext.results[item.index] is changed
    - ansible_selinux and ansible_selinux.status == "enabled"
  register: _result
  changed_when: _result.rc != 0
  tags:
    - mariadb_selinux
