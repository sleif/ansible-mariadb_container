---

- name: Include podman_init_vars.yml from sleif.podman
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: sleif.podman/tasks/includes/podman_init_vars.yml
      paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"

- name: Create custom configuration
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  community.general.ini_file:
    path: "{{ _container_storage_dir_base }}/{{ container_name }}/conf.d/custom.cnf"
    section: mysqld
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    # owner: "{{ _owner }}"
    # group: "{{ _group }}"
    mode: '0644'
  loop:
    - {option: 'max_connections', value: '{{ mariadb_container_max_connections }}'}
    - {option: 'innodb_read_only_compressed', value: 'off'}

- name: Create persistant container directories
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    # owner: "{{ _owner }}"
    # group: "{{ _group }}"
    mode: '0755'
  loop:
    - "{{ _container_storage_dir_base }}/{{ container_name }}/conf.d"
    - "{{ _container_storage_dir_base_local }}/{{ container_name }}/var_lib_mysql"

- name: Include role sleif.podman podman_operation podman_pod_create
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_pod_create
  vars:
    podman_operation: podman_pod_create
  tags: always

- name: Create Podman secrets
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_secret:
    state: present
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    skip_existing: true
  loop:
    - {name: 'mariadb_password', data: '{{ mariadb_password }}'}
    - {name: 'mariadb_root_password', data: '{{ mariadb_root_password }}'}
  tags: podman_secrets


- name: Create MariaDB container for {{ mariadb_database }}
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    image: "docker.io/mariadb:{{ mariadb_container_image_tag | d('latest') }}"
    pod: "{{ pod_name | default(omit) }}"
    network: "{{ podman_network_name if pod_name | d('') | length == 0 else [] }}"
    state: created
    restart_policy: always
    recreate: "{{ podman_container_recreate | d(false) }}"
    stop_timeout: 90
    # published: "{{ mariadb_container_exposed_port + ':3306' if pod_name | bool else omit }}"
    volume:
      - "{{ _container_storage_dir_base }}/{{ container_name }}/conf.d:/etc/mysql/conf.d:Z"
      - "{{ _container_storage_dir_base_local }}/{{ container_name }}/var_lib_mysql:/var/lib/mysql:Z"
    secrets:
      - mariadb_password
      - mariadb_root_password
    env:
      MYSQL_USER: "{{ mariadb_user }}"
      MYSQL_PASSWORD_FILE: "/run/secrets/mariadb_password"
      MYSQL_DATABASE: "{{ mariadb_database }}"
      MYSQL_ROOT_PASSWORD_FILE: "/run/secrets/mariadb_root_password"
      TZ: "Europe/Berlin"
    timezone: "Europe/Berlin"
  register: _container_create_results
# - debug: var=_container_create_results

- name: Include role sleif.podman podman_operation podman_generate_systemd
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_generate_systemd
  vars:
    podman_operation: podman_generate_systemd
    target: "{{ pod_name if pod_name is defined and pod_name | length > 0 else container_name }}"
  tags: always

- name: Create backup directory {{ container_name }}
  ansible.builtin.file:
    path: "{{ _container_storage_dir_base }}/{{ container_name }}_backups"
    state: directory
    owner: "{{ _owner }}"
    group: "{{ _group }}"
    mode: '0700'
  register: _backup_dir_create
  tags:
    - mariadb_backup

- name: Ensure bzip2 is installed
  ansible.builtin.package:
    name: bzip2
    state: present
  tags:
    - mariadb_backup

- name: Add cronjob for daily dump of mariadb {{ mariadb_database }}
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.cron:
    name: "Daily dump of mariadb {{ mariadb_database }}"
    minute: "11"
    hour: "*/4"
    job: "podman exec {{ container_name }} sh -c 'exec mariadb-dump --lock-tables --all-databases --user=root --password={{ mariadb_root_password }}' >
      {{ _container_storage_dir_base }}/{{ container_name }}_backups/{{ container_name }}.sql;
      bzip2 -f {{ _container_storage_dir_base }}/{{ container_name }}_backups/{{ container_name }}.sql"
  tags:
    - mariadb_backup

- name: Configure logrotate for the database dump
  ansible.builtin.template:
    src: logrotate.cfg.j2
    dest: "/etc/logrotate.d/{{ container_name }}.cfg"
    mode: '0644'
  tags:
    - mariadb_backup

- name: Selinux enable logrotate on NFS
  ansible.posix.seboolean:
    name: logrotate_use_nfs
    state: true
    persistent: true
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - mariadb_selinux

- name: Set selinux policy for backup rotation
  community.general.sefcontext:
    target: '{{ item.target }}'
    setype: "{{ item.setype }}"
    reload: true
    state: "{{ item.state }}"
  register: filecontext
  with_items:
    - {target: '{{ _container_storage_dir_base }}/{{ container_name }}_backups(/.*)?', setype: 'var_log_t', state: 'present'}
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - mariadb_selinux

- name: Run restore context to reload selinux
  ansible.builtin.command: |
    restorecon -F -R -v {{ item.target }}
  with_items:
    - {index: 0, target: '{{ _container_storage_dir_base }}/{{ container_name }}_backups'}
  when:
    - filecontext.results[item.index] is changed or _backup_dir_create.changed | bool
    - ansible_selinux and ansible_selinux.status == "enabled"
  register: _result
  changed_when: _result.rc != 0
  tags:
    - mariadb_selinux
